[{"/Users/aravind/development/my-school/src/App.tsx":"1","/Users/aravind/development/my-school/src/reportWebVitals.ts":"2"},{"size":4807,"mtime":1612549540157,"results":"3","hashOfConfig":"4"},{"size":425,"mtime":1612145023857,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"16d2w1o",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aravind/development/my-school/src/App.tsx",["11","12","13","14"],"import React, {Component, useRef} from 'react';\nimport './App.css';\n\nimport { Header } from './components/header/header';\nimport { Footer } from './components/footer/footer';\nimport spellingBee from './spelling-bee.png';\n\nimport {Button} from 'react-bootstrap';\n\n\n\nclass App extends Component {\n\n  state = {\n    playStarted: false,\n    playComplete: false,\n    currentScore: 0,\n    total: 0,\n    word: {\n      word: '',\n      id: '',\n      url: '',\n      spelling: ''\n    },\n    backgroundColor: ''\n  }\n\n  searchInput:any = null;\n\n  componentDidMount(){\n    \n  }\n\n  startPlay =  () => {\n    this.setState({playStarted: true, playComplete:false});\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ currentScore: this.state.currentScore, total:this.state.total })\n  };\n  let url = 'http://myschoolapp-env.eba-3ujvyqcp.us-east-1.elasticbeanstalk.com/play';\n  //let url = 'http://localhost:5000/play';\n  fetch(url, requestOptions)\n      .then(response => response.json())\n      .then(data => this.setState({\n        currentScore:data.currentScore, \n        total:data.total,\n        word:{\n          word: data.nextWord.word,\n          id: data.nextWord.id,\n          url: data.nextWord.url,\n          spelling: ''\n        }\n      }));\n  }\n\n  nextPlay = () => {\n    let url = 'http://myschoolapp-env.eba-3ujvyqcp.us-east-1.elasticbeanstalk.com/play';\n    if(null != this.searchInput){\n      this.searchInput?.focus();\n    }\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        currentScore: this.state.currentScore, \n        total:this.state.total,\n        currentWord:{\n          word: this.state.word.word,\n          spelling: this.state.word.spelling,\n        } \n      })\n  };\n    fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          this.setState({\n          currentScore:data.currentScore, \n          total:data.total,\n          word:{\n            word: data.nextWord.word,\n            id: data.nextWord.id,\n            url: data.nextWord.url,\n            spelling: ''\n          }\n        })\n        if(data.result){\n          this.setState({backgroundColor: 'lightgreen'});\n        }else{\n          console.log(\"setting background color\");\n          this.setState({backgroundColor: '#ff4b4b'});\n        }\n        setTimeout(()=>this.setState({backgroundColor: ''}), 200);\n      }).catch(err => {\n        alert(\"Some error happened. Please contact administrator\");\n        alert(err);\n      });\n        \n  }\n\n  \n\n  closePlay = () => {\n    this.setState({playComplete:true})\n  }\n\n  changeSpelling = (evt:any) => {\n    let word = this.state.word;\n    word.spelling = evt.target.value;\n    this.setState({word:word})\n  }\n\n  canBeSubmitted = () => {\n    let word = this.state.word;\n    if(word.spelling != ''){\n      this.nextPlay();\n    }\n  }\n\n  render() {\n    const {playStarted, word, currentScore, total, playComplete} = this.state;\n    return (\n      <>\n      <Header />\n      <div className=\"body\" style={{backgroundColor:this.state.backgroundColor}}>\n        {playComplete? <>\n          <div style={{fontSize:'2rem', margin:'20px'}}>\n            <span>Your score</span>\n            <div className=\"end-score\"><div style={{margin:'auto'}}>{currentScore}/{total}</div></div>\n          \n          </div>\n        </>:<>\n          {playStarted ? \n          <div style={{margin:'10px' }}>\n            <div className=\"score\"><div style={{margin:'auto'}}>{currentScore}/{total}</div></div>\n            <audio style={{margin:'20px'}}src={word.url} autoPlay controls></audio>\n            <input autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" ref={c => (this.searchInput = c)} type=\"text\" autoFocus={true} onBlur={this.canBeSubmitted} className=\"form-control\" value={word.spelling} onChange={this.changeSpelling}/>\n          </div>: <img src={spellingBee} className=\"welcome-image\"  />}\n        </>}\n      </div>\n      <div className=\"footer\">\n        <div className=\"navbar navbar-dark bg-dark box-shadow\">\n          <div className=\"d-flex justify-content-between\">\n          {playComplete? <><Button variant=\"success\" style={{margin:'20px'}} onClick={this.startPlay}>Play again</Button></>:\n          <>\n            {!playStarted ? <Button variant=\"success\" style={{margin:'20px'}} onClick={this.startPlay}>Play</Button> : \n            <>\n            <Button variant=\"success\" style={{margin:'20px'}} onClick={this.nextPlay}>Next</Button>\n            <Button variant=\"secondary\" style={{margin:'20px'}} onClick={this.closePlay}>End Game</Button>\n            </>}</>}\n          </div>\n        </div>\n      </div>\n    </>\n    );\n  }\n}\n\n\nexport default App;\n","/Users/aravind/development/my-school/src/reportWebVitals.ts",[],{"ruleId":"15","severity":1,"message":"16","line":1,"column":27,"nodeType":"17","messageId":"18","endLine":1,"endColumn":33},{"ruleId":"15","severity":1,"message":"19","line":5,"column":10,"nodeType":"17","messageId":"18","endLine":5,"endColumn":16},{"ruleId":"20","severity":1,"message":"21","line":115,"column":22,"nodeType":"22","messageId":"23","endLine":115,"endColumn":24},{"ruleId":"24","severity":1,"message":"25","line":138,"column":19,"nodeType":"26","endLine":138,"endColumn":71},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Footer' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]